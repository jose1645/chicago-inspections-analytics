name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker images
        run: |
          docker build -t synteck428/my-dataproject-ingesta:latest -f Dockerfile.ingesta .
          docker build -t synteck428/my-dataproject-model:latest -f Dockerfile.model .
          docker build -t synteck428/my-dataproject-webapp:latest -f Dockerfile.webapp .
          docker build -t synteck428/my-dataproject-backend_webapp:latest -f Dockerfile.backend_webapp .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login --username synteck428 --password-stdin

      - name: Push Docker images
        run: |
          docker push synteck428/my-dataproject-ingesta:latest
          docker push synteck428/my-dataproject-model:latest
          docker push synteck428/my-dataproject-webapp:latest
          docker push synteck428/my-dataproject-backend_webapp:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Decode SSH Key
        run: echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > key.pem

      - name: Set permissions for SSH key
        run: chmod 600 key.pem

      - name: Deploy to EC2
        env:
          EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
          SOCRATA_USERNAME: ${{ secrets.SOCRATA_USERNAME }}
          SOCRATA_PASSWORD: ${{ secrets.SOCRATA_PASSWORD }}
          SOCRATA_APP_TOKEN: ${{ secrets.SOCRATA_APP_TOKEN }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
            echo "Descargando imÃ¡genes de Docker..."
            docker pull synteck428/my-dataproject-ingesta:latest
            docker pull synteck428/my-dataproject-model:latest
            docker pull synteck428/my-dataproject-webapp:latest
            docker pull synteck428/my-dataproject-backend_webapp:latest

            echo "Creando archivo .env..."
            cat << 'ENV' > .env
            SOCRATA_USERNAME=${SOCRATA_USERNAME}
            SOCRATA_PASSWORD=${SOCRATA_PASSWORD}
            SOCRATA_APP_TOKEN=${SOCRATA_APP_TOKEN}
            S3_BUCKET_NAME=${S3_BUCKET_NAME}
            AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            ENV

            echo "Subiendo Docker Compose..."
            cat << 'COMPOSE' > docker-compose.yml
            version: "3.8"
            services:
              ingesta:
                image: synteck428/my-dataproject-ingesta:latest
                env_file:
                  - .env
                networks:
                  - my-network
              model:
                image: synteck428/my-dataproject-model:latest
                networks:
                  - my-network
              webapp:
                image: synteck428/my-dataproject-webapp:latest
                ports:
                  - "80:80"
                  - "443:443"
                volumes:
                  - /etc/letsencrypt:/etc/letsencrypt
                networks:
                  - my-network
              api:
                image: synteck428/my-dataproject-backend_webapp:latest
                ports:
                  - "8000:8000"
                env_file:
                  - .env
                networks:
                  - my-network
            networks:
              my-network:
                driver: bridge
            COMPOSE

            echo "Iniciando servicios con Docker Compose..."
            docker-compose down --remove-orphans
            docker-compose up -d

            echo "Limpiando recursos no utilizados..."
            docker image prune -af
            docker system prune --volumes -f
          EOF
