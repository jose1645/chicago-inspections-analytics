name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Cambia esto a la rama que deseas usar para el despliegue

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout del código fuente
      - name: Checkout code
        uses: actions/checkout@v2

      # Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Construcción de imágenes Docker
      - name: Build Docker image for Ingesta
        run: |
          docker build -t synteck428/my-dataproject-ingesta:latest -f Dockerfile.ingesta .

      - name: Build Docker image for Model
        run: |
          docker build -t synteck428/my-dataproject-model:latest -f Dockerfile.model .

      - name: Build Docker image for Webapp
        run: |
          docker build -t synteck428/my-dataproject-webapp:latest -f Dockerfile.webapp .

      - name: Build Docker image for API
        run: |
          docker build -t synteck428/my-dataproject-backend_webapp:latest -f Dockerfile.backend_webapp .

      # Login a Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login --username synteck428 --password-stdin

      # Subir imágenes a Docker Hub
      - name: Push Docker images
        run: |
          docker push synteck428/my-dataproject-ingesta:latest
          docker push synteck428/my-dataproject-model:latest
          docker push synteck428/my-dataproject-webapp:latest
          docker push synteck428/my-dataproject-backend_webapp:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Configurar credenciales de AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Cambia según tu región

      # Decodificar y configurar la llave SSH
      - name: Decode SSH Key
        run: echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > key.pem

      - name: Set permissions for SSH key
        run: chmod 600 key.pem

      # Desplegar en EC2
      - name: Deploy to EC2
        env:
          SOCRATA_USERNAME: ${{ secrets.SOCRATA_USERNAME }}
          SOCRATA_PASSWORD: ${{ secrets.SOCRATA_PASSWORD }}
          SOCRATA_APP_TOKEN: ${{ secrets.SOCRATA_APP_TOKEN }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
            echo "Deteniendo contenedores anteriores..."
            docker stop ingesta model api webapp || true
            docker rm ingesta model api webapp || true

            echo "Descargando imágenes de Docker..."
            docker pull synteck428/my-dataproject-ingesta:latest
            docker pull synteck428/my-dataproject-model:latest
            docker pull synteck428/my-dataproject-webapp:latest
            docker pull synteck428/my-dataproject-backend_webapp:latest

            echo "Ejecutando contenedores..."
            docker run -d --name ingesta \
              -e SOCRATA_USERNAME="${SOCRATA_USERNAME}" \
              -e SOCRATA_PASSWORD="${SOCRATA_PASSWORD}" \
              -e SOCRATA_APP_TOKEN="${SOCRATA_APP_TOKEN}" \
              -e S3_BUCKET_NAME="${S3_BUCKET_NAME}" \
              -e AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
              -e AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
              synteck428/my-dataproject-ingesta:latest

            docker run -d --name model \
              synteck428/my-dataproject-model:latest

            docker run -d --name webapp -p 80:80 -p 443:443 \
              -v /etc/letsencrypt:/etc/letsencrypt \
              synteck428/my-dataproject-webapp:latest

            docker run -d --name api \
              -p 8000:8000 \  # Mapea el puerto 8000 del contenedor al host
              -e S3_BUCKET_NAME="${S3_BUCKET_NAME}" \
              -e AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
              -e AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
              synteck428/my-dataproject-backend_webapp:latest

            echo "Limpiando recursos no utilizados..."
            docker image prune -af
            docker system prune --volumes -f
          EOF
