name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Cambia esto a la rama que desees usar para despliegue

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Construcción de la imagen de Docker para cada servicio
      - name: Build Docker image for Ingesta
        run: |
          docker build -t my-dataproject-ingesta -f Dockerfile.ingesta .

      - name: Build Docker image for Model
        run: |
          docker build -t my-dataproject-model -f Dockerfile.model .

      - name: Build Docker image for Webapp
        run: |
          docker build -t my-dataproject-webapp -f Dockerfile.webapp .

      - name: Build Docker image for API
        run: |
          docker build --progress=plain -t my-dataproject-backend_webapp -f Dockerfile.backend_webapp .

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login --username synteck428 --password-stdin

      # Etiquetar y subir las imágenes a Docker Hub
      - name: Tag and push Ingesta Docker image
        run: |
          docker tag my-dataproject-ingesta:latest synteck428/my-dataproject-ingesta:latest
          docker push synteck428/my-dataproject-ingesta:latest

      - name: Tag and push Model Docker image
        run: |
          docker tag my-dataproject-model:latest synteck428/my-dataproject-model:latest
          docker push synteck428/my-dataproject-model:latest

      - name: Tag and push Webapp Docker image
        run: |
          docker tag my-dataproject-webapp:latest synteck428/my-dataproject-webapp:latest
          docker push synteck428/my-dataproject-webapp:latest

      - name: Tag and push Backend_Webapp Docker image
        run: |
          docker tag my-dataproject-backend_webapp:latest synteck428/my-dataproject-backend_webapp:latest
          docker push synteck428/my-dataproject-backend_webapp:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Cambia esto a la región que estás utilizando

      - name: Decode SSH Key
        run: echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > key.pem

      - name: Set permissions for SSH key
        run: chmod 600 key.pem

      - name: Deploy to EC2
        env:
          SOCRATA_USERNAME: ${{ secrets.SOCRATA_USERNAME }}
          SOCRATA_PASSWORD: ${{ secrets.SOCRATA_PASSWORD }}
          SOCRATA_APP_TOKEN: ${{ secrets.SOCRATA_APP_TOKEN }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
            # Descargar las últimas imágenes de Docker
            docker pull synteck428/my-dataproject-ingesta:latest
            docker pull synteck428/my-dataproject-model:latest
            docker pull synteck428/my-dataproject-webapp:latest
            docker pull synteck428/my-dataproject-backend_webapp:latest

            # Detener y eliminar contenedores anteriores
            docker stop ingesta model webapp backend_webapp || true
            docker rm ingesta model webapp backend_webapp || true

            # Ejecutar los contenedores actualizados, pasando las variables de entorno necesarias
            docker run -d --name ingesta \
              -e SOCRATA_USERNAME="${SOCRATA_USERNAME}" \
              -e SOCRATA_PASSWORD="${SOCRATA_PASSWORD}" \
              -e SOCRATA_APP_TOKEN="${SOCRATA_APP_TOKEN}" \
              -e S3_BUCKET_NAME="${S3_BUCKET_NAME}" \
              synteck428/my-dataproject-ingesta:latest

            docker run -d --name model \
              synteck428/my-dataproject-model:latest

            docker run -d --name webapp -p 80:80 -p 443:443 \
              -v /etc/letsencrypt:/etc/letsencrypt \
              synteck428/my-dataproject-webapp:latest

            # Ejecutar el contenedor backend_webapp para API (Django)
            docker run -d -p 8000:8000 -v --name backend_webapp synteck428/my-dataproject-backend_webapp:latest
            docker exec -it backend_webapp python manage.py makemigrations
            docker exec -it backend_webapp python manage.py migrate
            docker exec -it backend_webapp python manage.py runserver 0.0.0.0:8000

            # Limpiar imágenes y volúmenes no utilizados
            docker image prune -af
            docker system prune --volumes -f

          EOF
