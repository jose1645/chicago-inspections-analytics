name: CI/CD Pipeline

on:
  push:
    branches:
      - funcional

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del código fuente
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # 3. Construir imágenes Dockerf
      - name: Build Docker images
        run: |
          docker build -t synteck428/my-dataproject-ingesta:latest -f Dockerfile.ingesta .
          docker build -t synteck428/my-dataproject-model:latest -f Dockerfile.model .
          docker build -t synteck428/my-dataproject-webapp:latest -f Dockerfile.webapp .
          docker build -t synteck428/my-dataproject-backend_webapp:latest -f Dockerfile.backend_webapp .
          docker build -t synteck428/my-dataproject-api_flask:latest -f Dockerfile.api_flask .

      # 4. Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login --username synteck428 --password-stdin

      # 5. Empujar imágenes a Docker Hub
      - name: Push Docker images
        run: |
          docker push synteck428/my-dataproject-ingesta:latest
          docker push synteck428/my-dataproject-model:latest
          docker push synteck428/my-dataproject-webapp:latest
          docker push synteck428/my-dataproject-backend_webapp:latest
          docker push synteck428/my-dataproject-api_flask:latest


  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # 1. Configurar dependencias criptográficas (solución de libcrypto)
      - name: Fix libcrypto
        run: sudo apt-get install --reinstall libssl-dev

      # 2. Configurar Deploy Key
      - name: Configure Deploy Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo -e "Host github.com\n\tStrictHostKeyChecking no\n\tIdentityFile ~/.ssh/deploy_key\n" > ~/.ssh/config

      # 3. Descargar solo docker-compose.yml en EC2
      - name: Fetch docker-compose.yml
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_INSTANCE_IP }} "
            echo 'Preparando directorio de despliegue...';
            mkdir -p ~/deploy && cd ~/deploy;

            echo 'Configurando sparse-checkout para obtener solo docker-compose.yml...';
            git init;
            git remote add origin git@github.com:jose1645/chicago-inspections-analytics.git;
            git config core.sparseCheckout true;
            echo 'docker-compose.yml' > .git/info/sparse-checkout;
            git config pull.rebase false;
            git pull origin funcional --allow-unrelated-histories;
            echo 'Archivo docker-compose.yml descargado.';
          "

      # 4. Desplegar servicios con Docker Composea
      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_INSTANCE_IP }} "
            echo 'Actualizando imágenes de Docker...';
            docker pull synteck428/my-dataproject-ingesta:latest;
            docker pull synteck428/my-dataproject-model:latest;
            docker pull synteck428/my-dataproject-webapp:latest;
            docker pull synteck428/my-dataproject-backend_webapp:latest;
            docker pull synteck428/my-dataproject-api_flask:latest;
            echo 'Exportando variables de entorno...';
            export SOCRATA_USERNAME=${{ secrets.SOCRATA_USERNAME }};
            export SOCRATA_PASSWORD=${{ secrets.SOCRATA_PASSWORD }};
            export SOCRATA_APP_TOKEN=${{ secrets.SOCRATA_APP_TOKEN }};
            export S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }};
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }};
            export DATABASE=${{ secrets.DATABASE }};
            export RELATIONAL_DATABASE_HOST=${{ secrets.RELATIONAL_DATABASE_HOST }};
            export USER_DATABASE=${{ secrets.USER_DATABASE }};
            export DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }};
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }};
            docker stop webapp
            docker rm webapp
            echo 'Levantando servicios con Docker Compose...';
            /usr/bin/docker-compose -f ~/deploy/docker-compose.yml down --rmi all --remove-orphans;
            /usr/bin/docker-compose -f ~/deploy/docker-compose.yml build --no-cache;
            /usr/bin/docker-compose -f ~/deploy/docker-compose.yml up --force-recreate -d;
            docker exec -it api python manage.py collectstatic --noinput
            echo 'Limpieza de imágenes y volúmenes no utilizados...';
            docker system prune -f;
          "
