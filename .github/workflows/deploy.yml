name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del código fuente
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # 3. Construir imágenes Docker
      - name: Build Docker images
        run: |
          docker build -t synteck428/my-dataproject-ingesta:latest -f Dockerfile.ingesta .
          docker build -t synteck428/my-dataproject-model:latest -f Dockerfile.model .
          docker build -t synteck428/my-dataproject-webapp:latest -f Dockerfile.webapp .
          docker build -t synteck428/my-dataproject-backend_webapp:latest -f Dockerfile.backend_webapp .

      # 4. Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login --username synteck428 --password-stdin

      # 5. Empujar imágenes a Docker Hub
      - name: Push Docker images
        run: |
          docker push synteck428/my-dataproject-ingesta:latest
          docker push synteck428/my-dataproject-model:latest
          docker push synteck428/my-dataproject-webapp:latest
          docker push synteck428/my-dataproject-backend_webapp:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # 1. Configurar dependencias criptográficas (solución de libcrypto)
      - name: Fix libcrypto
        run: sudo apt-get install --reinstall libssl-dev

      # 2. Configurar Deploy Key
      - name: Configure Deploy Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo -e "Host github.com\n\tStrictHostKeyChecking no\n\tIdentityFile ~/.ssh/deploy_key\n" > ~/.ssh/config

      # 3. Descargar solo docker-compose.yml en EC2
      - name: Fetch docker-compose.yml
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
            echo "Preparando directorio de despliegue..."
            mkdir -p ~/deploy
            cd ~/deploy

            echo "Configurando sparse-checkout para obtener solo docker-compose.yml..."
            git init
            git remote add origin git@github.com:jose1645/chicago-inspections-analytics.git
            git config core.sparseCheckout true
            echo "docker-compose.yml" > .git/info/sparse-checkout
            git pull origin master

            echo "Archivo docker-compose.yml descargado."
          EOF

      # 4. Desplegar servicios con Docker Compose
      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
            echo "Actualizando imágenes de Docker..."
            docker pull synteck428/my-dataproject-ingesta:latest
            docker pull synteck428/my-dataproject-model:latest
            docker pull synteck428/my-dataproject-webapp:latest
            docker pull synteck428/my-dataproject-backend_webapp:latest

            echo "Levantando servicios con Docker Compose..."
            docker-compose -f ~/deploy/docker-compose.yml down --remove-orphans
            docker-compose -f ~/deploy/docker-compose.yml up -d

            echo "Limpieza de imágenes y volúmenes no utilizados..."
            docker system prune -f
          EOF
