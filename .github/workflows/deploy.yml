name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del código fuente
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # 3. Construir imágenes Docker
      - name: Build Docker images
        run: |
          docker build -t synteck428/my-dataproject-ingesta:latest -f Dockerfile.ingesta .
          docker build -t synteck428/my-dataproject-model:latest -f Dockerfile.model .
          docker build -t synteck428/my-dataproject-webapp:latest -f Dockerfile.webapp .
          docker build -t synteck428/my-dataproject-backend_webapp:latest -f Dockerfile.backend_webapp .

      # 4. Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login --username synteck428 --password-stdin

      # 5. Empujar imágenes a Docker Hub
      - name: Push Docker images
        run: |
          docker push synteck428/my-dataproject-ingesta:latest
          docker push synteck428/my-dataproject-model:latest
          docker push synteck428/my-dataproject-webapp:latest
          docker push synteck428/my-dataproject-backend_webapp:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # 1. Configurar credenciales AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 2. Configurar Deploy Key para GitHubl


      - name: Fix libcrypto
        run: sudo apt-get install --reinstall libssl-dev

      - name: Configure Deploy Key
        run: |
          echo "Configurando Deploy Key para GitHub..."
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo -e "Host github.com\n\tStrictHostKeyChecking no\n\tIdentityFile ~/.ssh/deploy_key" > ~/.ssh/config

      # 3. Probar conexión SSH con GitHub
      - name: Test SSH connection
        run: ssh -T git@github.com

      # 4. Clonar repositorio y obtener docker-compose.yml
      - name: Clone repository and fetch docker-compose.yml
        run: |
          git clone --depth 1 --branch master git@github.com:jose1645/chicago-inspections-analytics.git
          cp chicago-inspections-analytics/docker-compose.yml ~/deploy/

      # 5. Configurar conexión SSH a EC2
      - name: Decode SSH Key
        run: echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > key.pem

      - name: Set permissions for SSH key
        run: chmod 600 key.pem

      # 6. Deploy to EC2
      - name: Deploy to EC2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
            echo "Configurando variables de entorno..."
            export SOCRATA_USERNAME=${{ secrets.SOCRATA_USERNAME }}
            export SOCRATA_PASSWORD=${{ secrets.SOCRATA_PASSWORD }}
            export SOCRATA_APP_TOKEN=${{ secrets.SOCRATA_APP_TOKEN }}
            export S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}

            echo "Preparando entorno de despliegue..."
            mkdir -p ~/deploy
            cd ~/deploy

            echo "Actualizando imágenes de Docker..."
            docker pull synteck428/my-dataproject-ingesta:latest
            docker pull synteck428/my-dataproject-model:latest
            docker pull synteck428/my-dataproject-webapp:latest
            docker pull synteck428/my-dataproject-backend_webapp:latest

            echo "Levantando servicios con Docker Compose..."
            docker-compose down --remove-orphans
            docker-compose up -d

            echo "Limpieza de imágenes y volúmenes no utilizados..."
            docker system prune -f
          EOF
